use std::fs;
use std::io::prelude::*;
use std::io::{self, BufWriter, Write};
use std::path::Path;

use crate::ast::*;

pub struct Compiler<W: Write> {
    scope: usize,
    buf: W,
}

impl<W: Write> Compiler<W> {
    pub fn new(buf: W) -> Compiler<W> {
        Compiler { scope: 0, buf }
    }

    pub fn compile<T: AsRef<Path>>(&mut self, ast: Expr) -> io::Result<()> {
        // fs::remove_file(&path)?;
        // let mut stream = BufWriter::new(fs::File::create(path)?);
        self.buf.write(b"@echo off\n")?;
        self.buf.write(b"REM AUTO-GENERATED FILE. DO NOT MODIFY.\n")?;
        self.buf.write(b"REM This file was automatically generated by the ski compiler.\n")?;

        match ast {
            Expr::If(i) => self.compile_if(i)?,
            _ => todo!(),
        };

        self.buf.write(b"@echo on")?;
        Ok(())
    }

    pub fn compile_if(&mut self, i: Box<If>) -> io::Result<()> {
        // self.buf.write(b"IF {}")
        Ok(())
    }
}
